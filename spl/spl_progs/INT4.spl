//int 4
//create and delete are implemented here

alias userSP R1;
userSP = SP;

alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE+1];

alias processtable R3;
processtable = PROCESS_TABLE+currentPID*16;

alias returnVal R4;
returnVal = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;

[processtable +13] = SP;
SP = [processtable + 11]*512 - 1;

alias syscall R5;
syscall = [[PTBR + 2*((userSP-5)/512)]*512 + (userSP-5)%512];
[processtable + 9] = syscall;

alias fileName R6;
fileName = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

if(syscall == 1) then
	alias counter R7;
	counter = 0;
	while(counter<60) do
		if([INODE_TABLE + counter*16 + 1] == fileName && [INODE_TABLE + counter*16 + 0] == DATA) then
			[returnVal] = 0;
			[processtable + 9] = 0;
			SP = [processtable +13];
			ireturn;
		endif;
		counter = counter + 1;
	endwhile;
	
	counter = 0;
	while(counter<60) do
		if([INODE_TABLE + counter*16 + 1] == -1) then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	
	if(counter == 60) then
		[returnVal] = -1;
		[processtable + 9] = 0;
		SP = [processtable +13];
		ireturn;
	endif;

	alias permission R8;
	permission = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];
	alias inodetable R9;
	inodetable = INODE_TABLE + counter*16;
	alias rootfile R10;
	rootfile = ROOT_FILE + counter*8;

	[inodetable +  0] = DATA;
	[inodetable +  1] = fileName;
	[inodetable +  2] = 0;
	[inodetable +  3] = [processtable+3];
	[inodetable +  4] = permission;
	[inodetable +  8] = -1;
	[inodetable +  9] = -1;
	[inodetable + 10] = -1;
	[inodetable + 11] = -1;

	[rootfile + 0] = fileName;
	[rootfile + 1] = 0;
	[rootfile + 2] = DATA;
	[rootfile + 3] = [USER_TABLE + 2*[processtable+3]];
	[rootfile + 4] = permission;
endif;



if(syscall == 4) then
	alias counter R7;
	counter = 0;
	while(counter<60) do
		if([INODE_TABLE + counter*16 + 1] == fileName) then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	
	if(counter == 60) then
		[returnVal] = 0;
		[processtable + 9] = 0;
		SP = [processtable +13];
		ireturn;
	endif;
	
	if([INODE_TABLE + counter*16 + 0] != DATA) then
		[returnVal] = -1;
		[processtable + 9] = 0;
		SP = [processtable +13];
		ireturn;
	endif;

	if([INODE_TABLE + counter*16 + 4] == 0) then
		if([processtable + 3] != 1 && [processtable + 3] != [INODE_TABLE + counter*16 + 3]) then
			[returnVal] = -1;
			[processtable + 9] = 0;
			SP = [processtable +13];
			ireturn;
		endif;
	endif;

	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 4;
	R2 = counter;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7);

	if([FILE_STATUS_TABLE + counter*4 + 1] != -1) then
		multipush(R1,R2,R3,R4,R5,R6,R7);
		R1 = 5;
		R2 = counter;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R7);
		[returnVal] = -2;
		[processtable + 9] = 0;
		SP = [processtable +13];
		ireturn;
	endif;

	alias count1 R8;
	alias count2 R9;

	count1 = 8;
	while(count1 < 12) do
		if([INODE_TABLE+counter*16+count1]!=-1)then
			count2 =0;
			while(count2<4)do
				if([BUFFER_TABLE+count2*4]==[INODE_TABLE+counter*16+count1]) then
					if([BUFFER_TABLE+count2*4+1]==1)then
                        [BUFFER_TABLE+count2*4+1]=0;
                        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
                        R1 = 4;
                        R2 = [BUFFER_TABLE+count2*4];
                        R3 = [SYSTEM_STATUS_TABLE+1];
                        call MOD_2;        	
						multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
                    endif;
                endif;
				count2=count2+1;
			endwhile;
		endif;
		count1 = count1+1;
	endwhile;

	[INODE_TABLE + counter*16 + 1]=-1;
    [ROOT_FILE + counter*8 + 1]=-1;

    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
    R1 = 5;
    R2 = counter;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
endif;

[returnVal] = 0;
[processtable + 9] = 0;
SP = [processtable +13];
ireturn;
