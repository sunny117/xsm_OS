alias functionNum R1;
alias returnValue R0;
print "pager";
if(functionNum == 1) then
	alias currentPID R2;
	
	alias counter R3;
	alias swap_process R4;
	swap_process = -1;	

	counter = 3;
	while(counter < 15) do
		if([PROCESS_TABLE + counter*16 + 6] == 0 && [PROCESS_TABLE + counter*16 + 4] == WAIT_PROCESS) then
			swap_process = counter;
			break;
		endif;
		counter = counter + 1;
	endwhile;

	if(swap_process == -1) then
		counter = 3;		
		while(counter < 15) do
			if([PROCESS_TABLE + counter*16 + 6] == 0 && [PROCESS_TABLE + counter*16 + 4] == WAIT_SEMAPHORE) then
				swap_process = counter;
				break;
			endif;
			counter = counter + 1;
		endwhile;
	endif;

	alias process_table R5;
	if(swap_process == -1) then
		alias max_tick R6;
		max_tick = 0;
		
		counter = 3;
		while(counter < 15) do
			process_table = PROCESS_TABLE + counter*16;

			if([process_table+6]==1 || [process_table+4] == RUNNING || [process_table + 4] == TERMINATED || [process_table+4] == ALLOCATED) then
				counter = counter + 1;
				continue;
			endif;

			if([process_table+6] == 0 && [process_table] > max_tick) then
				swap_process = counter;
				max_tick = [process_table];
			
			endif;
			counter = counter + 1;
		endwhile;
	endif;

	if(swap_process == -1) then
		[SYSTEM_STATUS_TABLE+5] = 0;
		return;
	endif;

	process_table = PROCESS_TABLE + swap_process*16;
	[process_table] = 0;

	alias page_table R6;
	page_table = PAGE_TABLE_BASE + swap_process*20;

	counter = 4;
	while(counter < 20) do
		alias page R7;
		page = [page_table + counter];

		if(page ==-1) then
			counter = counter + 2;	
			continue;
		endif;

		if(counter>=8 && counter < 15) then
			backup;
			R1 = 2;
			R2 = page;
			call MOD_2;
			restore;
			
			[page_table+counter] = -1;
			[page_table+counter+1] = "0000";
		endif;

		if(counter>=16 || (counter<=7 && [MEMORY_FREE_LIST + page] == 1)) then
			multipush(R1,R2,R3,R4,R5,R6,R7);
			R1 = 6;
			call MOD_2;
			multipop(R1,R2,R3,R4,R5,R6,R7);
			[DISK_MAP_TABLE + swap_process*10 + (counter/2)] = R0;

			backup;
			R1 = 1;
			R2 = currentPID;
			R3 = page;
			R4 = R0;
			call MOD_4;
			restore;

			backup;
			R1 = 2;
			R2 = page;
			call MOD_2;
			restore;
			
			[page_table+counter] = -1;
			[page_table+counter+1] = "0000";
		endif; 

		counter = counter + 2;
	endwhile;
	
	[process_table + 6] = 1;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4]+1;
	[SYSTEM_STATUS_TABLE + 5] = 0;
	
	return;
endif;


if(functionNum == 2) then
	alias currentPID R2;

	alias counter R3;
	counter = 0;

	alias swap_process R4;
	swap_process = -1;
	
	alias process_table R5;
	alias max_tick R6;
	max_tick = 0;
		
	counter = 3;
	while(counter < 15) do
		process_table = PROCESS_TABLE + counter*16;

		if([process_table+6] == 1 && [process_table+4] == READY && [process_table] > max_tick) then
			swap_process = counter;
			max_tick = [process_table];
		endif;
		counter = counter + 1;
	endwhile;


	if(swap_process == -1) then
		[SYSTEM_STATUS_TABLE+5] = 0;
		return;
	endif;
	
	process_table = PROCESS_TABLE + swap_process*16;
	[process_table] = 0;

	alias page_table R6;
	page_table = PAGE_TABLE_BASE + swap_process*20;

	alias disk_map_table R7;
	disk_map_table = DISK_MAP_TABLE + swap_process*10;

	counter = 2;
	while(counter < 10) do
		alias block R8;
		block = [disk_map_table + counter];

		if(block == -1) then
			counter = counter + 1;
			continue;
		endif;

		if(counter>=4 && counter <= 7) then
			counter = counter + 1;
			continue;
		endif;

		multipush(R1,R2,R3,R4,R5,R6,R7,R8);
		R1 = 1;
		call MOD_2;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8);

		[page_table+2*counter] = R0;
		[page_table+2*counter+1] = "0110";
		
		backup;
		R1 = 2;
		R2 = currentPID;
		R3 = R0;
		R4 = block;
		call MOD_4;
		restore;
		
		backup;
		R1 = 4;
		R3 = currentPID;
		R2 = block;
		call MOD_2;
		restore;

		[disk_map_table + counter] = -1;
		counter = counter + 1;
	endwhile;

	[process_table + 6] = 0;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4]-1;
	[SYSTEM_STATUS_TABLE + 5] = 0;
	
	return;
endif;
