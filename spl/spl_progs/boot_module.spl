//timer interupt
loadi(4,17);
loadi(5,18);

//library
loadi(63,13);
loadi(64,14);

//code1
loadi(65,7);
loadi(66,8);

//code2
loadi(82,69);
loadi(83,70);

//int10
loadi(22,35);
loadi(23,36);

//int7
loadi(16,29);
loadi(17,30);

//exception handler
loadi(2,15);
loadi(3,16);

//module 5
loadi(50,63);
loadi(51,64);

//For init(code1) process
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 79;
[PTBR+5] = "0110";
[PTBR+6] = 80;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 77;
[PTBR+17] = "0110";
[PTBR+18] = 78;
[PTBR+19] = "0110";

[77*512] = [65*512 +1];

[PROCESS_TABLE + 31] = 10;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 27] = 81;
[PROCESS_TABLE + 20] = 3;
[PROCESS_TABLE + 17] = 1;


//For code2 process
PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 86;
[PTBR+5] = "0110";
[PTBR+6] = 87;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 82;
[PTBR+9] = "0100";
[PTBR+10] = 83;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 84;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";

[84*512] = [82*512 +1];

[PROCESS_TABLE + 47] = 10;
[PROCESS_TABLE + 46] = PAGE_TABLE_BASE+40;
[PROCESS_TABLE + 45] = 8*512;
[PROCESS_TABLE + 44] = 0;
[PROCESS_TABLE + 43] = 88;
[PROCESS_TABLE + 36] = 3;
[PROCESS_TABLE + 33] = 2;

alias i R3;
i = 3;
while(i < 16) do
	[PROCESS_TABLE + i*16 + 4 ] = TERIMINATED;
	i = i + 1;
endwhile;

return;

