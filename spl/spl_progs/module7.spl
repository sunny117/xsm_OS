//boot module

//Disk Free List
loadi(61,2);

//Inode + User Table
loadi(59,3);
loadi(60,4);

//Root file
loadi(62,5);

//library
loadi(63,13);
loadi(64,14);

//init program
loadi(65,7);

//shell
loadi(67,9);
loadi(68,10);

//exception handler
loadi(2,15);
loadi(3,16);

//timer interupt routine
loadi(4,17);
loadi(5,18);

//Disk Controller Interrupt Routine
loadi(6,19);
loadi(7,20);

//console interrupt routine
loadi(8,21);
loadi(9,22);

//int4(Create, Delete)
loadi(10,23);
loadi(11,24);

//int5(Seek, Open, Close)
loadi(12,25);
loadi(13,26);

//int6(Read)
loadi(14,27);
loadi(15,28);

//int7(Write)
loadi(16,29);
loadi(17,30);

//int8(Fork)
loadi(18,31);
loadi(19,32);

//int9(Exec)
loadi(20,33);
loadi(21,34);

//int10(Exit)
loadi(22,35);
loadi(23,36);

//int11(Getpid, Getppid, Wait, Signal)
loadi(24,37);
loadi(25,38);

//int12(Logout)
loadi(26,39);
loadi(27,40);

//int13(Semget, Semrelease)
loadi(28,41);
loadi(29,42);

//int14(SemLock, SemUnLock)
loadi(30,43);
loadi(31,44);

//int15(Shutdown)
loadi(32,45);
loadi(33,46);

//int16(Newusr,Remusr,Setpwd,Getuname,Getuid)
loadi(34,47);
loadi(35,48);

//int17(Login)
loadi(36,49);
loadi(37,50);

//module 0(Resource Manager)
loadi(40,53);
loadi(41,54);

//module 1(Process Manager)
loadi(42,55);
loadi(43,56);

//module 2(Memeory Manager)
loadi(44,57);
loadi(45,58);

//module 3(File Manager)
loadi(46,59);
loadi(47,60);

//module 4(Device Manager)
loadi(48,61);
loadi(49,62);

//module 5(Sheduler Module)
loadi(50,63);
loadi(51,64);

//module 6(Pager Module)
loadi(52,65);
loadi(53,66);

//Initializing page table for init process
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[66*512] = [65*512 +1];

[PROCESS_TABLE + 31] = 10;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 27] = 77;
[PROCESS_TABLE + 20] = 3;
[PROCESS_TABLE + 19] = KERNEL;
[PROCESS_TABLE + 17] = 1;

//Initializing page table for shell process
PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

[78*512] = [67*512 +1];

alias process_table R3;
process_table = PROCESS_TABLE + 2*16;

[process_table + 15] = 10;
[process_table + 14] = PAGE_TABLE_BASE+40;
[process_table + 13] = 8*512;
[process_table + 12] = 0;
[process_table + 11] = 80;
[process_table +  4] = TERMINATED;
[process_table +  3] = ROOT;
[process_table +  2] = 1;
[process_table +  1] = 2;



alias i R4;

i=0;
while(i<10) do
	alias disk_map_table R5;
	disk_map_table = DISK_MAP_TABLE + 20;
	[disk_map_table + i] = -1;
	if(i==4) then
		[disk_map_table + i] = 9;
	endif;
	if(i==5) then
		[disk_map_table + i] = 10;
	endif;
	i = i+1;
endwhile;

i = 3;
while(i < 16) do
	[PROCESS_TABLE + i*16] = 0;
	[PROCESS_TABLE + i*16 + 4] = TERMINATED;
	i = i + 1;
endwhile;

i = 0;
while(i<128) do
	if(i<81) then
		[MEMORY_FREE_LIST+i] = 1;
	else
		[MEMORY_FREE_LIST+i] = 0;
	endif;
	i=i+1;
endwhile;

[TERMINAL_STATUS_TABLE]=0;
[DISK_STATUS_TABLE]=0;


[SYSTEM_STATUS_TABLE+2]=45;
[SYSTEM_STATUS_TABLE+3]=0;
[SYSTEM_STATUS_TABLE+4]=0;
[SYSTEM_STATUS_TABLE+5]=0;

i = 0;
while(i < 16) do
	[77*512-16+i] = -1;
	[80*512-16+i] = -1;
	i = i+1;
endwhile;

//Initializing semaphore table
i=0;
while(i < MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE + i*4 + 0] = -1;
	[SEMAPHORE_TABLE + i*4 + 1] =  0;
	i = i+1;
endwhile;

//Initializing file status table
//Locking PID and FILE OPEN COUNT to -1
i=0;
while(i < MAX_FILE_NUM) do
	[FILE_STATUS_TABLE + i*4 + 0] = -1;
	[FILE_STATUS_TABLE + i*4 + 1] = -1;
	i = i+1;
endwhile;

//Initializing buffer table
//Block Number and Locking PID to -1 and Dirty Bit to 0
i=0;
while(i < MAX_BUFFER) do
	[BUFFER_TABLE + i*4 + 0] = -1;
	[BUFFER_TABLE + i*4 + 1] =  0;
	[BUFFER_TABLE + i*4 + 2] = -1;
	i = i+1;
endwhile;

//Initializing the open file table
//INODE INDEX field to -1 and OPEN INSTANCE COUNT to 0
i=0;
while(i < MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE + i*4 + 0] = -1;
	[OPEN_FILE_TABLE + i*4 + 1] =  0;	
	i = i+1;
endwhile;

return;

