[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 5;
alias userSP R1;
userSP = SP;

alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];

alias process_table R3;
process_table = PROCESS_TABLE + 16*currentPID;

[process_table +13] = SP;
SP = [process_table +11] * 512 -1;

alias fileDesc R4;
fileDesc = [([PTBR + 2 * ((userSP - 4)/512)]*512) + (userSP-4)%512];

alias retVal R5;
retVal = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;

if(fileDesc != -2) then
	alias userPage R6;
	userPage = [process_table + 11];

	if(fileDesc<0 || fileDesc>7 || [userPage*512 + 496 + 2*fileDesc]!=FILE) then
		[retVal] = -1;
		[process_table + 9] = 0;
		SP = [process_table + 13];
		ireturn;
	endif;

	alias fileIndex R7;
	fileIndex = [userPage*512 + 496 + 2*fileDesc + 1];

	alias inodeIndex R8;
	inodeIndex = [OPEN_FILE_TABLE + 4*fileIndex];

	alias user_ID1 R9;
	alias user_ID2 R10;
	user_ID1 = [process_table + 3];
	user_ID2 = [INODE_TABLE + inodeIndex*16 + 3];

	//check for permissions
	if(user_ID1 != user_ID2 && user_ID1 != 1 && [INODE_TABLE + inodeIndex*16 + 3] == EXCLUSIVE) then
		[retVal] = -3;
		[process_table + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1 = 4;
	R2 = currentPID;
	R3 = inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

	if(R0 == -1) then	//file has been deleted

		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = 5;
		R2 = currentPID;
		R3 = inodeIndex;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

		[retVal] = -1;
		[process_table + 9] = 0;	//reset the mode flag
		SP = userSP;
		ireturn;
	endif;

	alias LSeek R11;
	LSeek = [OPEN_FILE_TABLE + 4*fileIndex + 2];

	if(LSeek == MAX_FILE_SIZE) then

		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1 = 5;
		R2 = currentPID;
		R3 = inodeIndex;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

		[retVal] = -2;
		[process_table + 9] = 0;	//reset the mode flag
		SP = userSP;
		ireturn;
	endif;

	if(LSeek % 512 == 0 && LSeek == [INODE_TABLE + 16*inodeIndex + 2]) then	//new block is to be allocated
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1 = 3;
		call MOD_2;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

		alias block_num R12;
		block_num = R0;

		if(block_num == -1) then

			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			R1 = 5;
			R2 = currentPID;
			R3 = inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);

			[retVal] = -2;
			[process_table + 9] = 0;	//reset the mode flag
			SP = userSP;
			ireturn;
		endif;
		[INODE_TABLE + 16*inodeIndex + 8 + (LSeek/512)] = block_num;
	endif;
//here
	alias word R13;
	word = [([PTBR + 2 * ((userSP - 3)/512)]*512) + (userSP-3)%512];
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	R1 = 1;
	R2 = [INODE_TABLE + 16*inodeIndex + 8 + (LSeek/512)];
	R3 = (LSeek % 512);
	R4 = word;
	call MOD_3;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);

	if(LSeek == [INODE_TABLE + 16*inodeIndex + 2]) then
		[INODE_TABLE + 16*inodeIndex + 2] = LSeek + 1;
		[ROOT_FILE + 8*inodeIndex + 1] = LSeek + 1;
	endif;

	[OPEN_FILE_TABLE + 4*fileIndex + 2] = LSeek + 1;	

	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	R1 = 5;
	R2 = currentPID;
	R3 = inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);

else
	multipush(R1,R2,R3,R4,R5);
	R3 = [[PTBR + 2*((userSP-3)/512)]*512 + ((userSP-3)%512)];
	R1 = 3;
	R2 = currentPID;
	call MOD_4;
	multipop(R1,R2,R3,R4,R5);
endif;

[retVal] = 0;
[process_table + 9] = 0;
SP = [process_table + 13];
ireturn;
