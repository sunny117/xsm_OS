//timer interupt
loadi(4,17);
loadi(5,18);

//library
loadi(63,13);
loadi(64,14);

//code
loadi(65,7);
loadi(66,8);

//int10
loadi(22,35);
loadi(23,36);

//int7
loadi(16,29);
loadi(17,30);

//exception handler
loadi(2,15);
loadi(3,16);

//idle code
loadi(69,11);
loadi(70,12);

//For idle process
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";


//Heap
[PTBR+4] = 83;
[PTBR+5] = "0110";
[PTBR+6] = 84;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0000";

[81*512] = [69*512 +1];

//For init process
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[76*512] = [65*512 +1];


[PROCESS_TABLE + 15] = 10;
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
[PROCESS_TABLE + 13] = 8*512;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 11] = 82;
[PROCESS_TABLE + 4] = 3;
[PROCESS_TABLE + 1] = 0;

[PROCESS_TABLE + 31] = 10;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 27] = 80;
[PROCESS_TABLE + 20] = 2;
[PROCESS_TABLE + 17] = 1;

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

SP = 8*512;
[SYSTEM_STATUS_TABLE + 1] = 1;

ireturn;
