alias currentPID R1;
currentPID = [SYSTEM_STATUS_TABLE + 1];
multipush(BP);

alias process_table_entry R2;
process_table_entry = PROCESS_TABLE + currentPID * 16;
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R3;
alias counter R4;

newPID = currentPID + 1;
if(newPID == 16) then
	newPID = 2;
endif;

if([SYSTEM_STATUS_TABLE + 5] !=0) then
	alias swapper_daemon R5;
	swapper_daemon = [PROCESS_TABLE + 15*16 + 4];
	
	if(swapper_daemon == READY || swapper_daemon == CREATED || swapper_daemon == RUNNING) then
		newPID = 15;
	else
		newPID = 0;
	endif;
else
	counter = 1;
	while(counter != 16) do
		alias new_process_table R6;
		new_process_table = PROCESS_TABLE + newPID*16;
		if(([new_process_table + 4] == READY || [new_process_table + 4] == CREATED) && [new_process_table+6]!=1) then
			break;
		else
			newPID = newPID + 1;
			if(newPID == 15) then
				newPID = 2;		
			endif;
			counter = counter + 1;
		endif; 
	endwhile;


endif;

if(counter == 16) then
	newPID = 0;
endif;

if(newPID == 0) then
breakpoint;
endif;
alias new_process_table R5;
new_process_table = PROCESS_TABLE + newPID * 16;
SP = [new_process_table + 11]*512 + [new_process_table +12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	BP = [[new_process_table + 11]*512];	
	SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
	[new_process_table + 9] = 0;
	ireturn;
endif;

[new_process_table + 4] = RUNNING;

multipop(BP);
return;

